#include <iostream>
using namespace std;

struct Node {
    int value;
    Node* left;
    Node* right;
    Node(int value) {
        this->value = value;
        this->left = this->right = NULL;
    };
};

struct BST {
    Node* root;
    BST() {
        this->root = nullptr;
    }
    
    Node* add(Node* current, int value) {
        if (current == NULL) {
            current = new Node(value);
        }
        else if (current->value > value) {
            current->left = add(current->left, value);
        }
        else if (current->value < value) {
            current->right = add(current->right, value);
        }
        return current;
    }

    bool search(Node* current, int value) {
        if (current == NULL) return false;
        if (current->value == value) return true;
        if (value < current->value) return search(current->left, value);
        return search(current->right, value);
    }

    int getHeight(Node* node) {
        if (!node) return 0;
        int leftHeight = getHeight(node->left);
        int rightHeight = getHeight(node->right);
        return max(leftHeight, rightHeight) + 1;
    }

    int findMaxDistance(Node* node) {
        if (!node) return 0;

        int leftHeight = getHeight(node->left);
        int rightHeight = getHeight(node->right);

        int leftMax = findMaxDistance(node->left);
        int rightMax = findMaxDistance(node->right);

        return max(max(leftMax, rightMax), leftHeight + rightHeight + 1);
    }
};

int main() {
    int n;
    cin >> n;
    BST bst;

    for (int i = 0; i < n; i++) {
        int value;
        cin >> value;
        if (!bst.search(bst.root, value)) {
            bst.root = bst.add(bst.root, value);
        }
    }

    int maxDistance = bst.findMaxDistance(bst.root);
    cout << maxDistance;
}
